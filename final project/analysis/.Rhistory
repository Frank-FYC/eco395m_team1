<<<<<<< HEAD
#correlation and visualization
res <- cor(SocialData_scaled)
corrplot(res, method = "color", tl.cex = 0.5, tl.col="black")
# k-means analysis
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
source('C:/Users/Tessie Krishna/Desktop/Q2.R', echo=TRUE)
source('C:/Users/Tessie Krishna/Desktop/Q2.R', echo=TRUE)
corrplot(res, method = "color", tl.cex = 0.5, tl.col="blue")
#correlation and visualization
corr <- cor(SocialData_scaled)
corrplot(corr, method = "color", tl.cex = 0.5, tl.col="black")
corrplot(corr, method = "circle", tl.cex = 0.5, tl.col="black")
corrplot(corr, method = "pie", tl.cex = 0.5, tl.col="black")
corrplot(corr, method = "color", type="upper", tl.cex = 0.5, tl.col="black")
corrplot(corr,  type="upper", tl.cex = 0.5, tl.col="black")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust")
corrplot(corr, method="color", type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"),
bg="lightblue")
corrplot(corr, method="color", type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="lightblue")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="lightblue")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="darkblue")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="purple")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="navyblue")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust",  bg="navyblue")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="navyblue")
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="darkgreen")
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
ggpairs(D1,aes(col = factor(clust1$cluster), alpha = 0.8))
library(HSAUR)
install.packages("HSAUR")
dissE <- daisy(D1)
km    <- kmeans(SocialData_scaled,3)
dissE <- daisy(SocialData_scaled)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
km    <- kmeans(SocialData,3)
dissE <- daisy(SocialData)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
km    <- kmeans(SocialData,6)
dissE <- daisy(SocialData)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
# k-means analysis
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
plot(SocialData_scaled,col=clust1$cluster)
points(clust1$center,col=1:2,pch=8,cex=1)
plot(D1,col=clust1$cluster)
points(clust1$center,col=1:2,pch=8,cex=1)
ggplot(D1,aes(col = factor(clust1$cluster), alpha = 0.8))
# k-means analysis
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
ggplot(D1,aes(col = factor(clust1$cluster), alpha = 0.8))
ggpairs(D1,aes(col = factor(clust1$cluster), alpha = 0.8))
plot(D1,col=clust1$cluster)
ggpairs(D1, mapping = NULL, columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
columnLabels = colnames(D1[columns]), labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, mapping = NULL, columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
columnLabels = colnames(D1[factor(clust1$cluster)]), labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, mapping = NULL, columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
columnLabels = colnames(D1[clust1]), labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, mapping = NULL, columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1,aes(col = factor(clust1$cluster), alpha = 0.8))
ggpairs(D1, mapping = NULL, columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1,aes(col = factor(clust1$cluster), alpha = 0.8))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, aes(col = factor(clust1$cluster), color='smooth'), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, aes(col = factor(clust1$cluster), col='red'), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, aes(col = factor(clust1$cluster), col='blue'), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"), alpha=1)
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=1), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL,
legends = stop("deprecated"))
D1 = subset(SocialData,select = c("fashion","cooking","beauty", "shopping", "photo_sharing"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("fashion","cooking","beauty", "shopping", "photo_sharing"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
library(foreach)
library(cluster)
library(corrplot)
library(plotly)
library(GGally)
library(HSAUR)
#36 different categories
SocialData <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/social_marketing.csv", row.names=1)
#delete users with spam
SocialData<-SocialData[(SocialData$spam==0),]
#delete uncategorized label "chatter"
SocialData <- subset(SocialData, select = -c(chatter, uncategorized))
#add total tweets & calculate adult ratio & delete adult ratio more than 30%
SocialData <- cbind(tot_twt = rowSums(SocialData), SocialData)
SocialData <- cbind(adult_ratio = 1, SocialData)
SocialData$adult_ratio <- SocialData$adult/SocialData$tot_twt
SocialData<-SocialData[(SocialData$adult_ratio<0.2),]
#delete uncategorized label "unused attributes"
SocialData <- subset(SocialData, select = -c(adult_ratio, tot_twt, spam))
# Center/scale the data
#SocialData = SocialData[,-(1,35)]
SocialData_scaled <- scale(SocialData, center=TRUE, scale=TRUE)
#K-grid to find the optimal K
k_grid = seq(2, 20, by=1)
SSE_grid = foreach(k = k_grid, .combine='c') %do% {
cluster_k = kmeans(SocialData_scaled, k, nstart=50)
cluster_k$tot.withinss
}
plot(k_grid, SSE_grid, xlab="K",ylab="SSE Grid", sub="SSE Grid vs K")
#CH-grid to find the optimal K
N=nrow(SocialData)
CH_grid = foreach(k = k_grid, .combine='c') %do% {
cluster_k = kmeans(SocialData_scaled, k, nstart=20)
W = cluster_k$tot.withinss
B = cluster_k$betweenss
CH = (B/W)*((N-k)/(k-1))
CH
}
plot(k_grid, CH_grid, xlab="K",
ylab="CH Grid",
sub="CH Grid vs K")
#Gap statistics
Market_gap = clusGap(SocialData_scaled, FUN = kmeans, nstart = 20, K.max = 10, B = 10)
plot(Market_gap)
#correlation and visualization
corr <- cor(SocialData_scaled)
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust", col=c("black", "white"), bg="darkgreen")
# k-means analysis
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("fashion","cooking","beauty", "shopping", "photo_sharing"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("online_gaming","college_uni","sports_playing"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("sports_fandom","parenting","school","food", "family"))
ggpairs(D1, aes(col = factor(clust1$cluster)), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
# k-means analysis
clust1 = kmeans(SocialData_scaled, centers=6, nstart=25)
D1 = subset(SocialData,select = c("personal_fitness","health_nutrition","outdoors"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("fashion","cooking","beauty", "shopping", "photo_sharing"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("online_gaming","college_uni","sports_playing"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("sports_fandom","parenting","school","food", "family"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("politics","news","computers", "travel", "automotive"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
D1 = subset(SocialData,select = c("tv_film","art","music"))
ggpairs(D1, aes(col = factor(clust1$cluster), alpha=0.5), columns = 1:ncol(D1), title = "Clustering on personal fitness, health and outdoors",
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "facetbar", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
diag = list(continuous =  "densityDiag", discrete = "barDiag", na = "naDiag"), params = NULL,
xlab = NULL, ylab = NULL, axisLabels = c("show"),
labeller = "label_value",
switch = NULL, showStrips = NULL, legend = NULL,
cardinality_threshold = 15, progress = NULL)
SocialMarket <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/social_marketing.csv", row.names=1)
#delete users with spam
SocialMarket<-SocialMarket[(SocialMarket$spam==0),]
#delete uncategorized label "chatter"
SocialMarket <- subset(SocialMarket, select = -c(chatter, uncategorized))
#add total tweets & calculate adult ratio & delete adult ratio more than 30%
SocialMarket <- cbind(tot_twt = rowSums(SocialMarket), SocialMarket)
SocialMarket <- cbind(adult_ratio = 1, SocialMarket)
SocialMarket$adult_ratio <- SocialMarket$adult/SocialMarket$tot_twt
SocialMarket<-SocialMarket[(SocialMarket$adult_ratio<0.2),]
#delete uncategorized label "unused attributes"
SocialMarket <- subset(SocialMarket, select = -c(adult_ratio, tot_twt, spam))
#center and scale the data
SocialMarket = scale(SocialMarket, center=TRUE, scale=TRUE)
# correlation
cor=cor(SocialMarket)
# correlation
corr=cor(SocialMarket)
# PCA
pca = prcomp(SocialMarket,scale=TRUE)
loadings = pca$rotation
scores = pca$x
# PVE
V = pca$sdev^2
PVE = V / sum(V)
round(PVE, 2)
Plot1 = qplot(c(1:33), PVE) +
geom_line() +
xlab("Principal Component") +
ylab("PVE") +
ggtitle("Scree Plot") +
ylim(0, 0.15)
Plot1
Plot2 = qplot(c(1:33), cumsum(PVE)) +
geom_line() +
xlab("Principal Component") +
ylab(NULL) +
ggtitle("Cumulative Scree Plot") +
ylim(0,1)
Plot2
# extract market segments
o1 = order(loadings[,1], decreasing=TRUE)
colnames(SocialMarket)[head(o1,5)]
o2 = order(loadings[,2], decreasing=TRUE)
colnames(SocialMarket)[head(o2,5)]
o3 = order(loadings[,3], decreasing=TRUE)
colnames(SocialMarket)[head(o3,5)]
o4 = order(loadings[,4], decreasing=TRUE)
colnames(SocialMarket)[head(o4,5)]
colnames(SocialMarket)[head(o5,5)]
o6 = order(loadings[,6], decreasing=TRUE)
colnames(SocialMarket)[head(o6,5)]
o5 = order(loadings[,5], decreasing=TRUE)
o7 = order(loadings[,7], decreasing=TRUE)
colnames(SocialMarket)[head(o7,5)]
o8 = order(loadings[,8], decreasing=TRUE)
colnames(SocialMarket)[head(o8,5)]
# extract market segments
o1 = order(loadings[,1], decreasing=TRUE)
colnames(SocialMarket)[head(o1,5)]
o2 = order(loadings[,2], decreasing=TRUE)
colnames(SocialMarket)[head(o2,5)]
o3 = order(loadings[,3], decreasing=TRUE)
colnames(SocialMarket)[head(o3,5)]
o4 = order(loadings[,4], decreasing=TRUE)
colnames(SocialMarket)[head(o4,5)]
o5 = order(loadings[,5], decreasing=TRUE)
colnames(SocialMarket)[head(o5,5)]
o6 = order(loadings[,6], decreasing=TRUE)
colnames(SocialMarket)[head(o6,5)]
o7 = order(loadings[,7], decreasing=TRUE)
colnames(SocialMarket)[head(o7,5)]
o8 = order(loadings[,8], decreasing=TRUE)
colnames(SocialMarket)[head(o8,5)]
source('C:/Users/Tessie Krishna/Desktop/Q2.R', echo=TRUE)
source('C:/Users/Tessie Krishna/Desktop/Q2.R', echo=TRUE)
source('~/GitHub/eco395m_team_awesome/Homework 4/Question 2.R', echo=TRUE)
corrplot(corr, type="upper", tl.cex = 0.5, tl.col="black", order="hclust")
corrplot(corr, method="color", type="upper", tl.cex = 0.5, tl.col="black", order="hclust")
install.packages("ISLR")
install.packages("xtable")
install.packages("xtable")
install.packages("psych")
install.packages("arules")
install.packages("arulesViz")
install.packages("data.table")
install.packages("arulesViz")
install.packages("LICORS")
install.packages("arulesViz")
library(arules)
install.packages(""arules"")
install.packages("arules")
install.packages("arulesViz")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ISLR")
install.packages("tidyverse")
library(ISLR)
library(tidyverse)
library(ggplot2)
library(psych)
install.packages("psych")
install.packages("xtable")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("LICORS")
install.packages("foreach")
install.packages("foreachmosaic")
install.packages("mosaic")
install.packages("gridExtra")
install.packages("grid")
install.packages("grid")
install.packages("foreach")
install.packages("cluster")
install.packages("corrplot")
install.packages("plotly")
install.packages("GGally")
install.packages("HSAUR")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("arules")
install.packages("arulesViz")
install.packages("data.table")
use "C:\Users\Tessie Krishna\Documents\GitHub\eco395m_team_awesome\final project\data\data_Deming_2008_0217.dta"
use "..\data_Deming_2008_0217.dta"
use "../data_Deming_2008_0217.dta"
source('~/GitHub/eco395m_team_awesome/final project/analysis/tess_script.R', echo=TRUE)
t.df <- read.dta("../data/data_Deming_2008_0217.dta")
t.df <- read.dta("../data_Deming_2008_0217.dta")
t.df <- read.dta("../data/data_Deming_2008_0217.dta")
t.df <- read.dta(".../data/data_Deming_2008_0217.dta")
t.df <- read.dta("./data/data_Deming_2008_0217.dta")
t.df <- read.dta("../data/data_Deming_2008_0217.dta")
library(tidyverse)
library(foreign)
df <- read.dta("../data/nlsy_deming.dta")
df2 <- read.dta("../data/data_Deming_2008_0217.dta")
t.df <- read.dta('../data/data_Deming_2008_0217.dta')
library(tidyverse)
library(foreign)
t.df <- read.dta('../data/data_Deming_2008_0217.dta')
t.df = read.dta('../data/data_Deming_2008_0217.dta')
t.df = read.dta('.../data/data_Deming_2008_0217.dta')
t.df = read.dta('..../data/data_Deming_2008_0217.dta')
t.df = read.dta('../data/data_Deming_2008_0217.dta')
setwd("~/GitHub/eco395m_team_awesome/final project/analysis")
t.df = read.dta('../data/data_Deming_2008_0217.dta')
source('~/GitHub/eco395m_team_awesome/final project/analysis/tess_script.R', echo=TRUE)
sum(t.df)
summary(t.df)
view(t.df)
=======
TitanicSurvival = read.csv('../data/TitanicSurvival.csv')
TitanicSurvival = read.csv('..\data\TitanicSurvival.csv')
TitanicSurvival = read.csv('../data/TitanicSurvival.csv')
cd
wd
sd
cd
getwd
getwd()
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
install.packages("FNN")
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:\Dropbox\Classes\ECO 395M Data mining and statisical learning\github_clone\ECO395M\data')
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data')
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
loadhou = read.csv('./github_clone/ECO395M/data/loadhou.csv')
loadhou = read.csv('../github_clone/ECO395M/data/loadhou.csv')
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
#####
# Train/test split
#####
# randomly sample a set of data points to include in the training set
train_ind = sample.int(N, N_train, replace=FALSE)
# Define the training and testing set
D_train = loadhou[train_ind,]
D_test = loadhou[-train_ind,]
gwd
wd
getwd
getwd()
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
#####
# Train/test split
#####
# randomly sample a set of data points to include in the training set
train_ind = sample.int(N, N_train, replace=FALSE)
# Define the training and testing set
D_train = loadhou[train_ind,]
D_test = loadhou[-train_ind,]
# optional book-keeping step:
# reorder the rows of the testing set by the KHOU (temperature) variable
# this isn't necessary, but it will allow us to make a pretty plot later
D_test = arrange(D_test, KHOU)
head(D_test)
# Now separate the training and testing sets into features (X) and outcome (y)
X_train = select(D_train, KHOU)
y_train = select(D_train, COAST)
X_test = select(D_test, KHOU)
y_test = select(D_test, COAST)
#####
# Fit a few models
#####
# linear and quadratic models
lm1 = lm(COAST ~ KHOU, data=D_train)
lm2 = lm(COAST ~ poly(KHOU, 2), data=D_train)
# KNN 250
knn250 = knn.reg(train = X_train, test = X_test, y = y_train, k=250)
names(knn250)
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
#####
# Train/test split
#####
# randomly sample a set of data points to include in the training set
train_ind = sample.int(N, N_train, replace=FALSE)
# Define the training and testing set
D_train = loadhou[train_ind,]
D_test = loadhou[-train_ind,]
# optional book-keeping step:
# reorder the rows of the testing set by the KHOU (temperature) variable
# this isn't necessary, but it will allow us to make a pretty plot later
D_test = arrange(D_test, KHOU)
head(D_test)
# Now separate the training and testing sets into features (X) and outcome (y)
X_train = select(D_train, KHOU)
y_train = select(D_train, COAST)
X_test = select(D_test, KHOU)
y_test = select(D_test, COAST)
#####
# Fit a few models
#####
# linear and quadratic models
lm1 = lm(COAST ~ KHOU, data=D_train)
lm2 = lm(COAST ~ poly(KHOU, 2), data=D_train)
# KNN 250
knn250 = knn.reg(train = X_train, test = X_test, y = y_train, k=250)
names(knn250)
#####
# Compare the models by RMSE_out
#####
# define a helper function for calculating RMSE
rmse = function(y, ypred) {
sqrt(mean((y-ypred)^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
ypred_lm1
y_test
ypred_lm1
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
rmse = function(y, x) {
sqrt(mean((y-ypred)^2))
}
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
rmse = function(y, x) {
sqrt(mean((y-x)^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
y_test
ypred_lm1
rmse = function(y, ypred) {
sqrt(mean((y-as.numeric(ypred))^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
as.numeric(ypred_lm1)
rmse(y_test, ypred_lm1)
y_test
as.numeric(ypred_lm1)
data.matrix(ypred_lm1)
rmse(y_test, ypred_lm1)
rmse = function(y, ypred) {
sqrt(mean((data.matrix(y-ypred))^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
# attach the predictions to the test data frame
D_test$ypred_lm2 = ypred_lm2
D_test$ypred_knn250 = ypred_knn250
p_test = ggplot(data = D_test) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='lightgrey') +
theme_bw(base_size=18) +
ylim(7000, 20000)
p_test
p_test + geom_point(aes(x = KHOU, y = ypred_knn250), color='red')
p_test + geom_path(aes(x = KHOU, y = ypred_knn250), color='red')
p_test + geom_path(aes(x = KHOU, y = ypred_knn250), color='red') +
geom_path(aes(x = KHOU, y = ypred_lm2), color='blue')
N
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
n
N
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
N
loadhou = loadhou[sample(nrow(loadhou), 150), ]
loadhou
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
loadhou = loadhou[sample.int(nrow(loadhou), 150), replace=FALSE]
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
loadhou_sample = loadhou[sample.int(nrow(loadhou), 150), ]
loadhou_sample
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
hsgrad <- ifelse(
rowMaxs(
as.matrix(
select(df,HighGrade_Compl94:HighGrade_Compl104)
)
,na.rm = TRUE)
>=12,1,0)
library(tidyverse)
library(foreign)
library(matrixStats)
df <- read.dta("../data/data_Deming_2008_0217.dta")
varlist <- c("BirthWeight")
mentaldisability <- ifelse(
rowMaxs(
as.matrix(
select(df,Retard86:Retard100)
)
,na.rm = TRUE)
>0,1,0)
library(tidyverse)
library(foreign)
library(matrixStats)
df <- read.dta("../data/data_Deming_2008_0217.dta")
setwd("C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/final project/analysis")
library(tidyverse)
library(foreign)
library(matrixStats)
df <- read.dta("../data/data_Deming_2008_0217.dta")
mentaldisability <- ifelse(
rowMaxs(
as.matrix(
select(df,Retard86:Retard100)
)
,na.rm = TRUE)
>0,1,0)
mentaldisability
somecollege <- ifelse(
rowMaxs(
as.matrix(
select(df,HighGrade_Compl94:HighGrade_Compl104)
)
,na.rm = TRUE)
>=12,1,0)
hsgrad <- ifelse(
rowMaxs(
as.matrix(
select(df,HighGrade_Compl94:HighGrade_Compl104)
)
,na.rm = TRUE)
>=12,1,0)
summary(somecollege)
summary(hsgrad)
rowMaxs(
as.matrix(
select(df,LD86:LD94)
)
,na.rm = TRUE)
learndisability <- ifelse(
rowMaxs(
as.matrix(
select(df,LD86:LD94)
)
,na.rm = TRUE)
>0,1,0)
summary(learndisability)
rowMaxs(
as.matrix(
select(df,Repeat88:Repeat104)
)
,na.rm = TRUE)
repeatgrade <- ifelse(
rowMaxs(
as.matrix(
select(df,Repeat88:Repeat104)
)
,na.rm = TRUE)
>0,1,0)
repeatgrade
summary(repeatgrade)
calc_age <- function(currentyear,childyear){
currentyear-childyear
}
calc_age(2019,1994)
calc_age(2019,DOB_Yr_Child)
calc_age(2019,df$DOB_Yr_Child)
df$PIATMT_Raw86
calc_age(1986,df$DOB_Yr_Child)
names(subset(df,calc_age(1986,df$DOB_Yr_Child))
)
subset(df,
calc_age(1986,df$DOB_Yr_Child)==5 &
calc_age(1986,df$DOB_Yr_Child)==6)
calc_age(1986,df$DOB_Yr_Child)==5
calc_age(1986,df$DOB_Yr_Child)
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5)
compmath1986
View(compmath1986)
calc_age(1986,compmath1986$DOB_Yr_Child)
compmath1986 <- subset(df,
calc_age(1986,df$DOB_Yr_Child)==5 &
calc_age(1986,df$DOB_Yr_Child)==6
)
calc_age(1986,compmath1986$DOB_Yr_Child)
compmath1986 <- subset(df,
calc_age(1986,df$DOB_Yr_Child)==5 |
calc_age(1986,df$DOB_Yr_Child)==6
)
calc_age(1986,compmath1986$DOB_Yr_Child)
compmath1986 %>% rowmean()
compmath1986 %>% RowMeans()
library(matrixStats)
compmath1986 %>% RowMeans2()
compmath1986 %>% rowMeans2()
compmath1986 %>% as.matrix() %>% rowMeans2()
compmath1986 %>% as.matrix() %>% rowMeans2(compmath1986$PIATMT_Raw86)
rowMeans2(compmath1986$PIATMT_Raw86)
compmath1986
compmath1986 <- rowMeans2(compmath1986.df$PIATMT_Raw86)
compmath1986.df <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)
compmath1986 <- rowMeans2(compmath1986.df$PIATMT_Raw86)
compmath1986.df$PIATMT_Raw86
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
childage1986 <- calc_age(1986,df$DOB_Yr_Child)
childage1988 <- calc_age(1988,df$DOB_Yr_Child)
childage1990 <- calc_age(1990,df$DOB_Yr_Child)
childage1992 <- calc_age(1992,df$DOB_Yr_Child)
childage1994 <- calc_age(1994,df$DOB_Yr_Child)
childage1996 <- calc_age(1996,df$DOB_Yr_Child)
childage1998 <- calc_age(1998,df$DOB_Yr_Child)
childage2000 <- calc_age(2000,df$DOB_Yr_Child)
childage2002 <- calc_age(2002,df$DOB_Yr_Child)
childage2004 <- calc_age(2004,df$DOB_Yr_Child)
compreading1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATRC_Pct86
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compreading1986
compmathfunc <- function(year,var){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$var
}
compscorefunc <- function(year,var){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$var
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$variable
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$paste(variable)
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,y){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$y
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc$variable
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,variable]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[[variable]]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,y){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[[y]]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
df <- data.frame(A=1:10, B=2:11, C=3:12)
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
calc_age <- function(currentyear,childyear){
currentyear-childyear
}
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compreading1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATRC_Pct86
df <- read.dta("../data/data_Deming_2008_0217.dta")
compscorefunc <- function(year,y){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[[y]]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
df <- data.frame(A=1:10, B=2:11, C=3:12)
fun1 <- function(x, column){
max(x[,column])
}
fun1(df, "B")
fun1(df, c("B","A"))
df
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,column]
}
df <- read.dta("../data/data_Deming_2008_0217.dta")
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,column]
}
compmath1986test <- compscorefunc(1986,"PIATMT_Raw86")
compmath1986test
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compreading1986 <- compscorefunc(1986,"PIATRC_Raw86")
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,ChildID]
df_comscorefunc[,column]
}
compmath1986 <- compscorefunc(1986,"PIATMT_Raw86")
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
childage1986 <- calc_age(1986,df$DOB_Yr_Child)
df$ChildID
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc$ChildID
df_comscorefunc[,column]
}
compmath1986 <- compscorefunc(1986,"PIATMT_Raw86")
year <- 1986
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
View(df_comscorefunc)
df$childage1986 <- calc_age(1986,df$DOB_Yr_Child)
df$childage1988 <- calc_age(1988,df$DOB_Yr_Child)
df$childage1990 <- calc_age(1990,df$DOB_Yr_Child)
df$childage1992 <- calc_age(1992,df$DOB_Yr_Child)
df$childage1994 <- calc_age(1994,df$DOB_Yr_Child)
df$childage1996 <- calc_age(1996,df$DOB_Yr_Child)
df$childage1998 <- calc_age(1998,df$DOB_Yr_Child)
df$childage2000 <- calc_age(2000,df$DOB_Yr_Child)
df$childage2002 <- calc_age(2002,df$DOB_Yr_Child)
df$childage2004 <- calc_age(2004,df$DOB_Yr_Child)
compmath.5to6 <- if(childage1986==5 | childage1986==6){
df$PIATMT_Raw86
} else if(childage1988==5 | childage1988==6){
df$PIATMT_Raw88
}
compmath.5to6 <- if(df$childage1986==5 | df$childage1986==6){
df$PIATMT_Raw86
} else if(df$childage1988==5 | df$childage1988==6){
df$PIATMT_Raw88
}
compmath.5to6 <- if(df$childage1986==5|6){
df$PIATMT_Raw86
} else if(df$childage1988==5|6){
df$PIATMT_Raw88
}
df$childage1986==5|6
df$childage1986==5
compmath.5to6 <- if(df$childage1986==5){
df$PIATMT_Raw86
}
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,ChildID]
df_comscorefunc[,column]
}
compmath1986 <- compscorefunc(1986,"PIATMT_Raw86")
>>>>>>> a0250926508916d734cb3e6e225d9cd6ce8ac808
