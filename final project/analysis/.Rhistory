TitanicSurvival = read.csv('../data/TitanicSurvival.csv')
TitanicSurvival = read.csv('..\data\TitanicSurvival.csv')
TitanicSurvival = read.csv('../data/TitanicSurvival.csv')
cd
wd
sd
cd
getwd
getwd()
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
install.packages("FNN")
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:\Dropbox\Classes\ECO 395M Data mining and statisical learning\github_clone\ECO395M\data')
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data')
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
loadhou = read.csv('./github_clone/ECO395M/data/loadhou.csv')
loadhou = read.csv('../github_clone/ECO395M/data/loadhou.csv')
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
#####
# Train/test split
#####
# randomly sample a set of data points to include in the training set
train_ind = sample.int(N, N_train, replace=FALSE)
# Define the training and testing set
D_train = loadhou[train_ind,]
D_test = loadhou[-train_ind,]
gwd
wd
getwd
getwd()
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
#####
# Train/test split
#####
# randomly sample a set of data points to include in the training set
train_ind = sample.int(N, N_train, replace=FALSE)
# Define the training and testing set
D_train = loadhou[train_ind,]
D_test = loadhou[-train_ind,]
# optional book-keeping step:
# reorder the rows of the testing set by the KHOU (temperature) variable
# this isn't necessary, but it will allow us to make a pretty plot later
D_test = arrange(D_test, KHOU)
head(D_test)
# Now separate the training and testing sets into features (X) and outcome (y)
X_train = select(D_train, KHOU)
y_train = select(D_train, COAST)
X_test = select(D_test, KHOU)
y_test = select(D_test, COAST)
#####
# Fit a few models
#####
# linear and quadratic models
lm1 = lm(COAST ~ KHOU, data=D_train)
lm2 = lm(COAST ~ poly(KHOU, 2), data=D_train)
# KNN 250
knn250 = knn.reg(train = X_train, test = X_test, y = y_train, k=250)
names(knn250)
library(tidyverse)
library(FNN)
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/github_clone/ECO395M/data/loadhou.csv')
summary(loadhou)
# plot the data
ggplot(data = loadhou) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='darkgrey') +
ylim(7000, 20000)
# Make a train-test split
N = nrow(loadhou)
N_train = floor(0.8*N)
N_test = N - N_train
#####
# Train/test split
#####
# randomly sample a set of data points to include in the training set
train_ind = sample.int(N, N_train, replace=FALSE)
# Define the training and testing set
D_train = loadhou[train_ind,]
D_test = loadhou[-train_ind,]
# optional book-keeping step:
# reorder the rows of the testing set by the KHOU (temperature) variable
# this isn't necessary, but it will allow us to make a pretty plot later
D_test = arrange(D_test, KHOU)
head(D_test)
# Now separate the training and testing sets into features (X) and outcome (y)
X_train = select(D_train, KHOU)
y_train = select(D_train, COAST)
X_test = select(D_test, KHOU)
y_test = select(D_test, COAST)
#####
# Fit a few models
#####
# linear and quadratic models
lm1 = lm(COAST ~ KHOU, data=D_train)
lm2 = lm(COAST ~ poly(KHOU, 2), data=D_train)
# KNN 250
knn250 = knn.reg(train = X_train, test = X_test, y = y_train, k=250)
names(knn250)
#####
# Compare the models by RMSE_out
#####
# define a helper function for calculating RMSE
rmse = function(y, ypred) {
sqrt(mean((y-ypred)^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
ypred_lm1
y_test
ypred_lm1
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
rmse = function(y, x) {
sqrt(mean((y-ypred)^2))
}
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
rmse = function(y, x) {
sqrt(mean((y-x)^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
y_test
ypred_lm1
rmse = function(y, ypred) {
sqrt(mean((y-as.numeric(ypred))^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
as.numeric(ypred_lm1)
rmse(y_test, ypred_lm1)
y_test
as.numeric(ypred_lm1)
data.matrix(ypred_lm1)
rmse(y_test, ypred_lm1)
rmse = function(y, ypred) {
sqrt(mean((data.matrix(y-ypred))^2))
}
ypred_lm1 = predict(lm1, X_test)
ypred_lm2 = predict(lm2, X_test)
ypred_knn250 = knn250$pred
rmse(y_test, ypred_lm1)
rmse(y_test, ypred_lm2)
rmse(y_test, ypred_knn250)
# attach the predictions to the test data frame
D_test$ypred_lm2 = ypred_lm2
D_test$ypred_knn250 = ypred_knn250
p_test = ggplot(data = D_test) +
geom_point(mapping = aes(x = KHOU, y = COAST), color='lightgrey') +
theme_bw(base_size=18) +
ylim(7000, 20000)
p_test
p_test + geom_point(aes(x = KHOU, y = ypred_knn250), color='red')
p_test + geom_path(aes(x = KHOU, y = ypred_knn250), color='red')
p_test + geom_path(aes(x = KHOU, y = ypred_knn250), color='red') +
geom_path(aes(x = KHOU, y = ypred_lm2), color='blue')
N
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
n
N
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
N
loadhou = loadhou[sample(nrow(loadhou), 150), ]
loadhou
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
loadhou = loadhou[sample.int(nrow(loadhou), 150), replace=FALSE]
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
loadhou_sample = loadhou[sample.int(nrow(loadhou), 150), ]
loadhou_sample
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-06 Class/in-class exercise.R', echo=TRUE)
hsgrad <- ifelse(
rowMaxs(
as.matrix(
select(df,HighGrade_Compl94:HighGrade_Compl104)
)
,na.rm = TRUE)
>=12,1,0)
library(tidyverse)
library(foreign)
library(matrixStats)
df <- read.dta("../data/data_Deming_2008_0217.dta")
varlist <- c("BirthWeight")
mentaldisability <- ifelse(
rowMaxs(
as.matrix(
select(df,Retard86:Retard100)
)
,na.rm = TRUE)
>0,1,0)
library(tidyverse)
library(foreign)
library(matrixStats)
df <- read.dta("../data/data_Deming_2008_0217.dta")
setwd("C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/final project/analysis")
library(tidyverse)
library(foreign)
library(matrixStats)
df <- read.dta("../data/data_Deming_2008_0217.dta")
mentaldisability <- ifelse(
rowMaxs(
as.matrix(
select(df,Retard86:Retard100)
)
,na.rm = TRUE)
>0,1,0)
mentaldisability
somecollege <- ifelse(
rowMaxs(
as.matrix(
select(df,HighGrade_Compl94:HighGrade_Compl104)
)
,na.rm = TRUE)
>=12,1,0)
hsgrad <- ifelse(
rowMaxs(
as.matrix(
select(df,HighGrade_Compl94:HighGrade_Compl104)
)
,na.rm = TRUE)
>=12,1,0)
summary(somecollege)
summary(hsgrad)
rowMaxs(
as.matrix(
select(df,LD86:LD94)
)
,na.rm = TRUE)
learndisability <- ifelse(
rowMaxs(
as.matrix(
select(df,LD86:LD94)
)
,na.rm = TRUE)
>0,1,0)
summary(learndisability)
rowMaxs(
as.matrix(
select(df,Repeat88:Repeat104)
)
,na.rm = TRUE)
repeatgrade <- ifelse(
rowMaxs(
as.matrix(
select(df,Repeat88:Repeat104)
)
,na.rm = TRUE)
>0,1,0)
repeatgrade
summary(repeatgrade)
calc_age <- function(currentyear,childyear){
currentyear-childyear
}
calc_age(2019,1994)
calc_age(2019,DOB_Yr_Child)
calc_age(2019,df$DOB_Yr_Child)
df$PIATMT_Raw86
calc_age(1986,df$DOB_Yr_Child)
names(subset(df,calc_age(1986,df$DOB_Yr_Child))
)
subset(df,
calc_age(1986,df$DOB_Yr_Child)==5 &
calc_age(1986,df$DOB_Yr_Child)==6)
calc_age(1986,df$DOB_Yr_Child)==5
calc_age(1986,df$DOB_Yr_Child)
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5)
compmath1986
View(compmath1986)
calc_age(1986,compmath1986$DOB_Yr_Child)
compmath1986 <- subset(df,
calc_age(1986,df$DOB_Yr_Child)==5 &
calc_age(1986,df$DOB_Yr_Child)==6
)
calc_age(1986,compmath1986$DOB_Yr_Child)
compmath1986 <- subset(df,
calc_age(1986,df$DOB_Yr_Child)==5 |
calc_age(1986,df$DOB_Yr_Child)==6
)
calc_age(1986,compmath1986$DOB_Yr_Child)
compmath1986 %>% rowmean()
compmath1986 %>% RowMeans()
library(matrixStats)
compmath1986 %>% RowMeans2()
compmath1986 %>% rowMeans2()
compmath1986 %>% as.matrix() %>% rowMeans2()
compmath1986 %>% as.matrix() %>% rowMeans2(compmath1986$PIATMT_Raw86)
rowMeans2(compmath1986$PIATMT_Raw86)
compmath1986
compmath1986 <- rowMeans2(compmath1986.df$PIATMT_Raw86)
compmath1986.df <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)
compmath1986 <- rowMeans2(compmath1986.df$PIATMT_Raw86)
compmath1986.df$PIATMT_Raw86
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
childage1986 <- calc_age(1986,df$DOB_Yr_Child)
childage1988 <- calc_age(1988,df$DOB_Yr_Child)
childage1990 <- calc_age(1990,df$DOB_Yr_Child)
childage1992 <- calc_age(1992,df$DOB_Yr_Child)
childage1994 <- calc_age(1994,df$DOB_Yr_Child)
childage1996 <- calc_age(1996,df$DOB_Yr_Child)
childage1998 <- calc_age(1998,df$DOB_Yr_Child)
childage2000 <- calc_age(2000,df$DOB_Yr_Child)
childage2002 <- calc_age(2002,df$DOB_Yr_Child)
childage2004 <- calc_age(2004,df$DOB_Yr_Child)
compreading1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATRC_Pct86
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compreading1986
compmathfunc <- function(year,var){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$var
}
compscorefunc <- function(year,var){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$var
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$variable
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$paste(variable)
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,y){subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)$y
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc$variable
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,variable]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,variable){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[[variable]]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
compscorefunc <- function(year,y){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[[y]]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
df <- data.frame(A=1:10, B=2:11, C=3:12)
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
calc_age <- function(currentyear,childyear){
currentyear-childyear
}
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compreading1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATRC_Pct86
df <- read.dta("../data/data_Deming_2008_0217.dta")
compscorefunc <- function(year,y){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[[y]]
}
compmath1986test <- compscorefunc(1986,PIATMT_Raw86)
df <- data.frame(A=1:10, B=2:11, C=3:12)
fun1 <- function(x, column){
max(x[,column])
}
fun1(df, "B")
fun1(df, c("B","A"))
df
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,column]
}
df <- read.dta("../data/data_Deming_2008_0217.dta")
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,column]
}
compmath1986test <- compscorefunc(1986,"PIATMT_Raw86")
compmath1986test
compmath1986 <- subset(df,calc_age(1986,df$DOB_Yr_Child)==5 | calc_age(1986,df$DOB_Yr_Child)==6)$PIATMT_Raw86
compreading1986 <- compscorefunc(1986,"PIATRC_Raw86")
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,ChildID]
df_comscorefunc[,column]
}
compmath1986 <- compscorefunc(1986,"PIATMT_Raw86")
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
childage1986 <- calc_age(1986,df$DOB_Yr_Child)
df$ChildID
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc$ChildID
df_comscorefunc[,column]
}
compmath1986 <- compscorefunc(1986,"PIATMT_Raw86")
year <- 1986
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
View(df_comscorefunc)
df$childage1986 <- calc_age(1986,df$DOB_Yr_Child)
df$childage1988 <- calc_age(1988,df$DOB_Yr_Child)
df$childage1990 <- calc_age(1990,df$DOB_Yr_Child)
df$childage1992 <- calc_age(1992,df$DOB_Yr_Child)
df$childage1994 <- calc_age(1994,df$DOB_Yr_Child)
df$childage1996 <- calc_age(1996,df$DOB_Yr_Child)
df$childage1998 <- calc_age(1998,df$DOB_Yr_Child)
df$childage2000 <- calc_age(2000,df$DOB_Yr_Child)
df$childage2002 <- calc_age(2002,df$DOB_Yr_Child)
df$childage2004 <- calc_age(2004,df$DOB_Yr_Child)
compmath.5to6 <- if(childage1986==5 | childage1986==6){
df$PIATMT_Raw86
} else if(childage1988==5 | childage1988==6){
df$PIATMT_Raw88
}
compmath.5to6 <- if(df$childage1986==5 | df$childage1986==6){
df$PIATMT_Raw86
} else if(df$childage1988==5 | df$childage1988==6){
df$PIATMT_Raw88
}
compmath.5to6 <- if(df$childage1986==5|6){
df$PIATMT_Raw86
} else if(df$childage1988==5|6){
df$PIATMT_Raw88
}
df$childage1986==5|6
df$childage1986==5
compmath.5to6 <- if(df$childage1986==5){
df$PIATMT_Raw86
}
compscorefunc <- function(year,column){
df_comscorefunc <- subset(df,calc_age(year,df$DOB_Yr_Child)==5 | calc_age(year,df$DOB_Yr_Child)==6)
df_comscorefunc[,ChildID]
df_comscorefunc[,column]
}
compmath1986 <- compscorefunc(1986,"PIATMT_Raw86")
