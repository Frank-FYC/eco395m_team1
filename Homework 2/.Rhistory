source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/script.R')
getwd()
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/ECO395M/r/saratoga_lm.R')
install.packages("mosaic")
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/ECO395M/r/saratoga_lm.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/script.R')
data(SaratogaHouses)
summary(SaratogaHouses)
data(SaratogaHouses)
df <- data(SaratogaHouses)
data(SaratogaHouses)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/script.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/script.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-20 Class/saratoga_lm.R')
colMeans(rmse_vals)
train_cases
n_train
n_test
n
test_cases
?setdiff()
saratoga_train
# Root mean-squared prediction error
rmse(saratoga_test$price, yhat_test1)
rmse(saratoga_test$price, yhat_test3)
rmse_vals = do(100)*{
# re-split into train and test cases
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# fit to this training set
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm_boom = lm(price ~ lotSize + age + pctCollege +
fireplaces + rooms + heating + fuel + centralAir +
bedrooms*rooms + bathrooms*rooms +
bathrooms*livingArea, data=saratoga_train)
lm_biggerboom = lm(price ~ lotSize + landValue + waterfront + newConstruction + bedrooms*bathrooms + heating + fuel + pctCollege + rooms*bedrooms + rooms*bathrooms + rooms*heating + livingArea, data=saratoga_train)
# predict on this testing set
yhat_test2 = predict(lm2, saratoga_test)
yhat_testboom = predict(lm_boom, saratoga_test)
yhat_testbiggerboom = predict(lm_biggerboom, saratoga_test)
c(rmse(saratoga_test$price, yhat_test2),
rmse(saratoga_test$price, yhat_testboom),
rmse(saratoga_test$price, yhat_testbiggerboom))
}
rmse(saratoga_test$price, yhat_test3)
# Root mean-squared prediction error
rmse(saratoga_test$price, yhat_test1)
rmse(saratoga_test$price, yhat_test2)
rmse(saratoga_test$price, yhat_test3)
rmse_vals
colMeans(rmse_vals)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/ECO395M/r/sclass_knn.R')
install.packages("FNN")
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/ECO395M/r/sclass_knn.R')
install.packages("foreach")
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/ECO395M/r/sclass_knn.R')
sclass = read.csv('./sclass.csv')
# read in the data: make sure to use the path name to
# wherever you'd stored the file
loadhou = read.csv('./loadhou.csv')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/sclass_knn.R')
sclass = read.csv('./sclass.csv')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/loadhou.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/sclass_knn.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/sclass_knn.R')
p_out = ggplot(data=rmse_grid_out) +
geom_path(aes(x=K, y=RMSE, color='testset'), size=1.5) +
scale_x_continuous(trans=log)
ind_best = which.min(rmse_grid_out$RMSE)
k_best = k_grid[ind_best]
p_out = ggplot(data=rmse_grid_out) +
geom_path(aes(x=K, y=RMSE, color='testset'), size=1.5) +
scale_x_continuous(trans=log)
ind_best = which.min(rmse_grid_out$RMSE)
k_best = k_grid[ind_best]
sclass = read.csv('./sclass.csv')
# The variables involved
summary(sclass)
# Focus on first trim level: 350
sclass350 = subset(sclass, trim == '350')
dim(sclass350)
# create a train/test split
N = nrow(sclass350)
N_train = floor(0.8*N)
train_ind = sample.int(N, N_train, replace=FALSE)
sclass350_train = sclass350[train_ind,]
sclass350_test = sclass350[-train_ind,]
y_train_350 = sclass350_train$price
X_train_350 = data.frame(mileage = sclass350_train$mileage)
y_test_350 = sclass350_test$price
X_test_350 = data.frame(mileage = sclass350_test$mileage)
rmse = function(y, ypred) {
sqrt(mean((y-ypred)^2))
}
k_grid = unique(round(exp(seq(log(N_train), log(2), length=100))))
rmse_grid_out = foreach(k = k_grid, .combine='c') %do% {
knn_model = knn.reg(X_train_350, X_test_350, y_train_350, k = k)
rmse(y_test_350, knn_model$pred)
}
rmse_grid_out = data.frame(K = k_grid, RMSE = rmse_grid_out)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/sclass_knn.R')
environment()
sessionInfo()
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/script.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/eco395m_team_awesome/Homework 2/script.R')
colMeans(rmse_vals)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-27 Class/glass.R')
## for illustration, consider the RIxMg plane (i.e., just 2D)
X = select(fgl,RI,Mg)
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-27 Class/glass.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-27 Class/glass.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-27 Class/glass.R')
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-27 Class/glass.R')
sessionInfo()
install.packages(c("openssl", "purrr", "tidyr"))
install.packages(c("openssl", "purrr", "tidyr"))
install.packages(c("openssl", "purrr", "tidyr"))
install.packages(c("openssl", "purrr", "tidyr"))
source('C:/Dropbox/Classes/ECO 395M Data mining and statisical learning/2019-02-27 Class/glass.R')
install.packages("purr")
